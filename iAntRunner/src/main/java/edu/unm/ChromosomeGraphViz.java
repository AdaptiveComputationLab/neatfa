package edu.unm;

import edu.unm.neat.jneat.*;

import java.util.*;

/**
 * @author John Ericksen
 */
public class ChromosomeGraphViz {

    public static void main(String[] args){
        //if(args.length > 1){
        List<Gene> chromosome = buildOrganism("384.0,1,1,17,2.2431405203463983;385.0,1,2,17,-2.5098805302845903;386.0,0,3,17,-1.0232846921473602;387.0,1,4,17,4.8674512168501565;388.0,1,5,17,0.8096594973925875;389.0,1,6,17,2.4897264986388796;390.0,1,7,17,-3.31527138096084;391.0,1,8,17,1.555159552897393;392.0,1,9,17,-0.005472980851067677;393.0,1,10,17,2.88794737945822;394.0,1,11,17,-1.2586110458602464;395.0,1,12,17,7.311302411896035;396.0,1,13,17,0.9776756080572433;397.0,1,14,17,-2.1241676394206097;398.0,1,15,17,-1.2808869704613313;399.0,1,16,17,-2.209109881248513;400.0,1,17,17,-5.741979733320733;401.0,1,18,17,-2.599321259066919;402.0,1,19,17,0.17582323816803247;403.0,1,20,17,-7.44958264882462;405.0,1,22,17,3.043680577057713;406.0,1,23,17,-0.027389793118031136;407.0,1,24,17,-0.5396146113100775;408.0,1,1,18,3.95964624058999;409.0,1,2,18,-0.6519144796463885;410.0,1,3,18,-1.5287864051320479;411.0,1,4,18,-2.205103151182723;412.0,1,5,18,-0.7730020718355788;413.0,1,6,18,0.5156428608605981;414.0,1,7,18,-2.0192854925170884;415.0,1,8,18,-2.007888320845645;416.0,1,9,18,-3.2863425239895236;417.0,1,10,18,10.088013542792439;418.0,1,11,18,-5.562360870039187;419.0,1,12,18,-3.3282205347089775;420.0,1,13,18,-0.07333979645699795;421.0,1,14,18,1.5364289753767986;422.0,1,15,18,1.971126308954196;423.0,1,16,18,-1.213417349654739;424.0,1,17,18,0.8153682190687508;425.0,1,18,18,11.946749330858582;426.0,1,19,18,4.223024674469208;427.0,1,20,18,-5.145366421324885;429.0,1,22,18,-1.2170110631801174;430.0,1,23,18,1.0622799646160517;431.0,1,24,18,2.1552130404383387;432.0,1,1,19,-1.4336981124449903;433.0,1,2,19,0.39510270690377675;434.0,1,3,19,1.7681837041723445;435.0,1,4,19,-1.000603854035988;436.0,1,5,19,1.3038442577557476;437.0,1,6,19,5.177142858973164;438.0,1,7,19,2.9650400955405587;439.0,1,8,19,-1.5836112878020219;440.0,1,9,19,0.8256434045958674;441.0,0,10,19,2.086278807253907;442.0,1,11,19,-5.757865451982213;443.0,1,12,19,-5.226685016971656;444.0,1,13,19,3.570629071358326;445.0,1,14,19,5.772782699844784;446.0,1,15,19,-1.325880561565949;447.0,1,16,19,1.7032134575489724;448.0,1,17,19,0.29707470246934187;449.0,1,18,19,2.4678445439079306;450.0,1,19,19,-4.0451159627283335;451.0,1,20,19,-4.977613699840248;453.0,1,22,19,1.1502663241928563;454.0,1,23,19,0.5529959209264395;455.0,1,24,19,-2.8288363957255536;456.0,1,1,20,-1.6868115208318857;457.0,1,2,20,-1.5480484300816402;458.0,1,3,20,9.943218341216529;459.0,1,4,20,1.488613006479743;460.0,1,5,20,-0.8618058314865005;461.0,1,6,20,-5.881249083286914;462.0,1,7,20,1.543906757679154;463.0,1,8,20,1.6819576476136393;464.0,1,9,20,-0.05004239430073665;465.0,1,10,20,0.6193451500906146;466.0,1,11,20,4.675490403957324;467.0,1,12,20,1.3605176155675562;468.0,1,13,20,1.1823977295034789;469.0,1,14,20,-1.3249106668540067;470.0,1,15,20,-5.910895253881906;471.0,1,16,20,-1.9826157012547718;472.0,1,17,20,-4.309027116984719;473.0,1,18,20,-5.090094771020208;474.0,1,19,20,1.7920858496536707;475.0,1,20,20,1.5846634262248216;477.0,1,22,20,3.6794902818041386;478.0,1,23,20,3.3214608161257377;479.0,1,24,20,-1.7239165498898377;504.0,1,1,22,2.7018769200757133;505.0,1,2,22,-0.6793225935656857;506.0,1,3,22,4.758530477403814;507.0,1,4,22,1.8330402082265813;508.0,1,5,22,-0.583656148678281;509.0,1,6,22,-2.1091663435233503;510.0,1,7,22,-0.07643623943121763;511.0,1,8,22,0.44796505120273483;512.0,1,9,22,2.3142669707130543;513.0,1,10,22,2.401447709747268;514.0,1,11,22,-16.065181340885264;515.0,0,12,22,0.3369689035108961;516.0,1,13,22,0.6140588529815749;517.0,1,14,22,0.9765179047208727;518.0,1,15,22,1.364544332538917;519.0,1,16,22,-3.4593193593179015;520.0,1,17,22,-2.6504545030530386;521.0,1,18,22,-1.1964984188238916;522.0,1,19,22,0.1052126509034792;523.0,1,20,22,0.14602347425402407;525.0,1,22,22,-0.8663700221961751;526.0,1,23,22,-2.1112982599909085;527.0,1,24,22,0.45575963115099927;528.0,1,1,23,-4.306761193258707;529.0,1,2,23,3.7096494448546795;530.0,1,3,23,-0.5302540281616601;531.0,1,4,23,-1.1867760980911422;532.0,1,5,23,2.1108734324177743;533.0,1,6,23,-3.194028581031424;534.0,1,7,23,-2.9862221092341166;535.0,1,8,23,0.05826129452548401;536.0,1,9,23,-0.22432150481474122;537.0,1,10,23,-0.6210956831545494;538.0,1,11,23,3.1607833852145926;539.0,1,12,23,-0.051536443266728404;540.0,1,13,23,-1.3522260658435912;541.0,1,14,23,-6.476375220119662;542.0,0,15,23,-2.7432785605607846;543.0,1,16,23,1.8417578531920387;544.0,1,17,23,6.700934734940545;545.0,1,18,23,-2.01481886791822;546.0,1,19,23,2.052906251325653;547.0,1,20,23,3.3226777290716085;549.0,1,22,23,0.7862008890628895;550.0,1,23,23,-4.0021481871685145;551.0,1,24,23,-1.7776337027561677;552.0,1,1,24,-1.0609882450101817;553.0,1,2,24,2.1822753319796795;554.0,1,3,24,-0.062352288581147275;555.0,1,4,24,0.9145187728589834;556.0,1,5,24,-1.5033011651356196;557.0,1,6,24,-3.46040253297587;558.0,1,7,24,-0.7273490064629546;559.0,1,8,24,4.680761480211376;560.0,1,9,24,-0.4785846420350546;561.0,1,10,24,-3.0199796501193075;562.0,1,11,24,2.136088037967206;563.0,1,12,24,-0.39331421255967514;564.0,1,13,24,-1.9858678578461262;565.0,1,14,24,10.607162003209455;566.0,1,15,24,-0.38884527109877937;567.0,1,16,24,2.7782180804121177;568.0,1,17,24,-1.808462656512352;569.0,0,18,24,4.0006292087695;570.0,1,19,24,-1.660996212675599;571.0,0,20,24,-0.3800220993331833;573.0,1,22,24,2.1226768309108976;574.0,0,23,24,-2.41045451082491;575.0,1,24,24,2.062477343433643;603.0,1,14,36,14.684130634632433;604.0,1,36,17,-11.081458355312893;622.0,1,4,41,7.562277624315453;623.0,1,41,17,-5.283021829901996;625.0,1,24,42,-1.0769815914242455;626.0,1,42,24,1.3402406507683455;673.0,1,19,58,4.5678100678786535;674.0,1,58,22,0.25457869353258245;698.0,1,36,23,1.4765222639426188;746.0,1,5,75,2.835309550002639;747.0,1,75,20,-10.135542131904257;769.0,1,41,42,4.456533472122173;797.0,1,16,41,-0.12432971644935203;822.0,1,14,89,-0.5212074064840946;823.0,1,89,36,-2.568825724326913;853.0,1,14,75,-1.3237542014156731;932.0,1,13,41,-4.954434092921542;986.0,1,9,127,-0.9172409847035501;987.0,1,127,24,2.564788658733537;1009.0,1,3,75,2.0615432991383646;1078.0,1,3,58,5.953277531779934;1085.0,1,18,149,1.3679534433994642;1086.0,1,149,24,-1.8967140289457665;1098.0,1,3,152,3.383952193024525;1099.0,1,152,17,-2.7838743577283696;1180.0,1,58,23,1.390491748299937;1196.0,1,23,174,-0.6697775766868141;1197.0,1,174,18,-0.08322420178958262;1214.0,1,14,58,-3.3911586525913933;1277.0,1,22,193,-1.4119408967910183;1278.0,1,193,23,-1.5956289821659564;1315.0,1,12,75,0.11899889552147647;1369.0,1,8,174,9.945194817370089;1412.0,1,23,223,-0.6337824283806442;1413.0,1,223,24,1.5880295282439092;1421.0,1,152,193,-0.00900550001833278;1477.0,1,75,149,-1.3519703554288625;1510.0,1,16,36,0.898145084404231;1547.0,1,5,42,4.199345429142439;1551.0,1,12,248,-0.6132403941962457;1552.0,1,248,22,-2.160442298626047;1570.0,1,6,41,1.6769714407080507;1682.0,1,15,272,1.0;1683.0,1,272,23,-2.7432785605607846;1715.0,1,1,248,5.6167030663344955;");

        output("digraph G {");

        Set<Integer> internalNodes = new HashSet<Integer>();
        output("subgraph cluster_inputs {");
        for(int i = 1; i < 17; i++){
            output("n" + i);
            internalNodes.add(i);
        }
        output("}");

        output("subgraph cluster_outputs {");
        for(int i = 0; i < 3; i++){
            output("n" + (17 + i));
            internalNodes.add(17 + i);
        }
        output("}");


        output("subgraph cluster_internal {");
        for (Gene gene : chromosome) {
            if(!internalNodes.contains(gene.getLnk().getIn_node().getNode_id())){
                internalNodes.add(gene.getLnk().getIn_node().getNode_id());
                output("n" + gene.getLnk().getIn_node().getNode_id());
            }

            if(!internalNodes.contains(gene.getLnk().getOut_node().getNode_id())){
                internalNodes.add(gene.getLnk().getOut_node().getNode_id());
                output("n" + gene.getLnk().getOut_node().getNode_id());
            }
        }
        output("}");

        for (Gene gene : chromosome) {

            output("n" + gene.getLnk().getIn_node().getNode_id() + " -> n" + gene.getLnk().getOut_node().getNode_id());
        }

        output("}");

    }

    public static void output(String... parts){
        for (String part : parts) {
            System.out.println(part);
        }
    }

    public static List<Gene> buildOrganism(String chromosome) {

        List<Gene> organism = new ArrayList<Gene>();
        for (String geneString : chromosome.split(";")) {
            String[] parts = geneString.split(",");
            if(parts.length == 5){
                edu.unm.neat.jneat.Gene gene = new edu.unm.neat.jneat.Gene();
                gene.setInnovation_num(Double.parseDouble(parts[0]));
                gene.setEnable(Integer.parseInt(parts[1]) == 1);
                gene.setLnk(new Link(Double.parseDouble(parts[4]), new NNode(0, Integer.parseInt(parts[2])),
                        new NNode(0, Integer.parseInt(parts[3])),true));

                organism.add(gene);
            }
        }
        return organism;
    }
}
