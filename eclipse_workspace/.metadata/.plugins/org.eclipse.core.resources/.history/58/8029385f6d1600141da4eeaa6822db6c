#ifndef CONTROLLER_H_
#define CONTROLLER_H_

/* base class for controller objects */
#include <argos3/core/control_interface/ci_controller.h>
/* updates the motors' speed settings */
#include <argos3/plugins/robots/generic/control_interface/ci_differential_steering_actuator.h>
/* collision detection sensors */
#include <argos3/plugins/robots/foot-bot/control_interface/ci_footbot_proximity_sensor.h>
/* detect color changes on the ground, used for food & nest detection */
#include <argos3/plugins/robots/foot-bot/control_interface/ci_footbot_motor_ground_sensor.h>
/* used in navigation to locate targets, light is fixed at the nest */
#include <argos3/plugins/robots/foot-bot/control_interface/ci_footbot_light_sensor.h>
/* class for random number generator objects */
#include <argos3/core/utility/math/rng.h>
/* 2D vector definition */
#include <argos3/core/utility/math/vector2.h>
/* provide LOG and LOGERR print out capability to the Argos GUI screen */
#include <argos3/core/utility/logging/argos_log.h>

/* access to Argos3 classes and objects */
using namespace argos;
/* access to std::endl and std::vector, etc. */
using namespace std;

/* Controller Class for iAnt robots. The "brain" for individual robot behavior which implements the iAnt CPFA. */
class Controller : public CCI_Controller {
public:
	Controller();
	~Controller();

      /**
       * Initializes the controller.
       * You should always perform all your memory allocation and configuration in this method,
       * and not in the constructor.
       * The default implementation of this method does nothing.
       * @param t_node The XML tree associated to this controller.
       * @see Reset()
       * @see Destroy()
       */
      virtual void Init(TConfigurationNode& t_node) {}

      /**
       * Executes a control step.
       * The logic of your controller goes here.
       * The default implementation does nothing.
       */
      virtual void ControlStep() {}

      /**
       * Resets the state of the controller to what it was right after Init() was executed.
       * Note that the state of the robot, as well as the state of sensors and actuators
       * is automatically reset by ARGoS outside this class.
       * The default implementation of this method does nothing.
       * @see Init()
       * @see Destroy()
       */
      virtual void Reset() {}

      /**
       * The default implementation of this method does nothing.
       * @see Init()
       * @see Reset()
       */
      virtual void Destroy() {}

};

#endif /* CONTROLLER_H_ */
