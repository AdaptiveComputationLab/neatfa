#include "iAnt_loop_functions.h"

// (constructor) initialize class variables, Init() function contains further setup
iAnt_loop_functions::iAnt_loop_functions() :
	floorEntity(NULL),
	RNG(NULL),
	foragingArenaSideX(-1.0f, 1.0f),
	foragingArenaSideY(-1.0f, 1.0f),
	foodRadiusSquared(0.0f),
	foodItemReset(false),
	nestRadiusSquared(0.0f),
	targetSeeking(true),
	foragingTimer(0),
	foragingTimerMax(0),
	foodGatheredCount(0)
{}

void iAnt_loop_functions::Init(TConfigurationNode& t_node) {
    // floor object where food and nest objects are drawn
    floorEntity = &GetSpace().GetFloorEntity();

    // import parameters from the XML file
    TConfigurationNode& loop_parameters = GetNode(t_node, "loop_parameters");

    // use to initialize class objects and variables
    UInt32 foodItemCount;
    Real xNestPosition, yNestPosition;
    Real arenaSize_x, arenaSize_y;

    // set XML parameters to variables
	GetNodeAttribute(loop_parameters, "foodItemCount", foodItemCount);
    GetNodeAttribute(loop_parameters, "foodRadius", foodRadiusSquared);
    GetNodeAttribute(loop_parameters, "foodItemReset", foodItemReset);
    GetNodeAttribute(loop_parameters, "xNestPosition", xNestPosition);
    GetNodeAttribute(loop_parameters, "yNestPosition", yNestPosition);
    GetNodeAttribute(loop_parameters, "nestRadius", nestRadiusSquared);
    GetNodeAttribute(loop_parameters, "arenaSize_x", arenaSize_x);
    GetNodeAttribute(loop_parameters, "arenaSize_y", arenaSize_y);
    GetNodeAttribute(loop_parameters, "foragingTimer", foragingTimerMax);

    // do this here so the user doesn't have to pre-calculate in the XML file
    foodRadiusSquared *= foodRadiusSquared;
    nestRadiusSquared *= nestRadiusSquared;

    // set internal references to the arena size and nest center position
    // for ease of use, simply change settings in XML instead of recompiling
    nestPosition.Set(xNestPosition, yNestPosition);
    arenaDimensions.Set(arenaSize_x, arenaSize_y);

    // area of the floor where food items can be placed
    // by default this is set to 90% of the entire arena (except the far edge)
    foragingArenaSideX.Set(-(arenaSize_x / 2.0) * 0.9, (arenaSize_x / 2.0) * 0.9);
    foragingArenaSideY.Set(-(arenaSize_y / 2.0) * 0.9, (arenaSize_y / 2.0) * 0.9);

    // create a random number generator for random food item placement
    RNG = CRandom::CreateRNG("argos");

    // set the positions for all food items to be drawn later
    for(UInt32 i = 0; i < foodItemCount; ++i) {
    	foodPositions.push_back(CVector2(RNG->Uniform(foragingArenaSideX), RNG->Uniform(foragingArenaSideY)));
    }

    // set the initial search target (pheromone) to a location
    searchTarget = CVector2(RNG->Uniform(foragingArenaSideX), RNG->Uniform(foragingArenaSideY));

    // get the footbot entities
    CSpace::TMapPerType& footbots = GetSpace().GetEntitiesByType("foot-bot");

    // and set the footbot's nest location and search target values
    for(CSpace::TMapPerType::iterator it = footbots.begin(); it != footbots.end(); ++it) {
        CFootBotEntity& footBot = *any_cast<CFootBotEntity*>(it->second);
        iAnt_controller& controller = dynamic_cast<iAnt_controller&>(footBot.GetControllableEntity().GetController());

        controller.setNestPosition(nestPosition);
        controller.setForagingTarget(nestPosition);
        controller.setFootBotTarget(searchTarget);
    }
}

CColor iAnt_loop_functions::GetFloorColor(const CVector2& position) {
    // set the pheromone marker
    if(targetSeeking) {
        if((position - searchTarget).SquareLength() < foodRadiusSquared) {
            return CColor::GRAY40;
        }
    }

    // food items are black discs with radius set in XML
    // check the positions of all food items
    for(UInt32 i = 0; i < foodPositions.size(); ++i) {
        // if we are in the bounds of a food item, paint it black
		if((position - foodPositions[i]).SquareLength() < foodRadiusSquared) {
			return CColor::BLACK;
		}
	}

	// nest area is grey disc with radius set in XML
    // if we are in the bounds of the nest, paint it grey
    if((position - nestPosition).SquareLength() < nestRadiusSquared) {
        return CColor::GRAY80;
    }

    // default arena color when otherwise not the nest, food item, or pheromone
	return CColor::WHITE;
}

// this function is called BEFORE the ControlStep() function in the controller class
void iAnt_loop_functions::PreStep() {
    // container for all available foot-bot controller objects
    CSpace::TMapPerType& footbots = GetSpace().GetEntitiesByType("foot-bot");

    // used to set each foot-bot's internal position variable
    CVector2 footBotPosition;
    bool hasTargetChanged(targetSeeking);

    // loop through all of the foot-bot controller objects
	for(CSpace::TMapPerType::iterator it = footbots.begin(); it != footbots.end(); ++it) {
	    // variable for the current foot-bot
	    CFootBotEntity& footBot = *any_cast<CFootBotEntity*>(it->second);

	    // variable for the current foot-bot's controller object
		iAnt_controller& controller = dynamic_cast<iAnt_controller&>(footBot.GetControllableEntity().GetController());

		// set the current foot-bot's position (used in controller class for positioning)
		footBotPosition.Set(footBot.GetEmbodiedEntity().GetPosition().GetX(),
                            footBot.GetEmbodiedEntity().GetPosition().GetY());
		controller.setFootBotPosition(footBotPosition);
		controller.setFootBotTarget(searchTarget);
        if(foodGatheredCount == foodPositions.size()) {
            controller.setSimulationStatus(true); // true = simulation complete
        }

		/*
		LOG << endl
		    << footBot.GetId() << endl
            << footBotPosition << endl
            << searchTarget << endl;
            */

	    // is the foot-bot carrying a food item?
	    if(controller.hasFoodItem()) {
	        // is the foot-bot carrying a food item AND in the nest?
	        if(controller.inTheNest()) {
	            // drop off the food item and update foodData variables
	            controller.setFoodItemStatus(false);
	            floorEntity->SetChanged();
	         }
        // has the foot-bot currently found a food item?
	    } else if(controller.hasFoundFood()) {
            // reset the foraging timer
            foragingTimer = 0;

            bool done = false, updateFloor = false;
            // check each food item position to see if the foot-bot found food
            for(size_t i = 0; i < foodPositions.size() && !done; ++i) {
                // if the foot-bot is within range of a food item
                if((footBotPosition - foodPositions[i]).SquareLength() < foodRadiusSquared) {
                    // set foot-bot foraging spot
                    searchTarget = foodPositions[i];

                    if(foodItemReset) {
                        // move to a new place!
                        foodPositions[i].Set(RNG->Uniform(foragingArenaSideX), RNG->Uniform(foragingArenaSideY));
                    } else {
                        // redraw food item at the nest
                        foodPositions[i].Set(nestPosition.GetX(), nestPosition.GetY());
                        foodGatheredCount++;
                    }

                    // pick up the food item and update foodData variables
                    controller.setFoodItemStatus(true);
                    updateFloor = true; // floorEntity->SetChanged();
                    done = true;
                }
            }

            if(updateFloor) {
            	floorEntity->SetChanged();
            }
	    } else if(foragingTimer < foragingTimerMax) {
	        controller.setForagingStatus(false);
	        controller.setTargetingStatus(true);
	        foragingTimer++;
	        targetSeeking = true;
	    } else {
            controller.setForagingStatus(true);
            controller.setTargetingStatus(false);
            searchTarget = nestPosition;
            targetSeeking = false;
	    }

	    if(hasTargetChanged != targetSeeking) {
	        floorEntity->SetChanged();
	    }
	}
}

void iAnt_loop_functions::PostStep() {
    // nothing... yet.
}

void iAnt_loop_functions::Reset() {
	for(UInt32 i = 0; i < foodPositions.size(); ++i) {
		foodPositions[i].Set(RNG->Uniform(foragingArenaSideX), RNG->Uniform(foragingArenaSideY));
	}

	foragingTimer = 0;
	foodGatheredCount = 0;
}

REGISTER_LOOP_FUNCTIONS(iAnt_loop_functions, "iAnt_loop_functions")
