/****************************************
 *
 * Version 2.0 beta
 *
 */

#ifndef IANT_CONTROLLER_H_
#define IANT_CONTROLLER_H_

#include <argos3/core/control_interface/ci_controller.h>
#include <argos3/plugins/robots/generic/control_interface/ci_differential_steering_actuator.h>
#include <argos3/plugins/robots/foot-bot/control_interface/ci_footbot_proximity_sensor.h>
#include <argos3/plugins/robots/foot-bot/control_interface/ci_footbot_motor_ground_sensor.h>
#include <argos3/plugins/robots/foot-bot/control_interface/ci_footbot_light_sensor.h>
#include <argos3/core/utility/math/vector2.h>
#include <argos3/core/utility/math/rng.h>
#include <argos3/core/utility/logging/argos_log.h>

using namespace argos;
using namespace std;

class iAnt_controller : public CCI_Controller {

public:

	// structure used for foot-bot turning controls
	struct navigation {
		enum turningMechanism {
			NO_TURN = 0,
			TURN,
		} turningMechanism;

	    CDegrees collisionAngleTolerance;
	    Real collisionDistanceTolerance;
	    CRange<CRadians> goStraightAngleRange;
	    CRange<Real> foragingArenaSideX, foragingArenaSideY;

	    CVector2 botPosition;
	    CVector2 botTarget;
	    CVector2 foragingTarget;
	    CVector2 nestPosition;

        CRadians turnThreshold;
		Real maxSpeed;

		navigation();
		void Init(TConfigurationNode& t_tree);
	};

	// constructor/destructor
	iAnt_controller();
	virtual ~iAnt_controller() {}

	// inherited and required functions for controllers
	virtual void Init(TConfigurationNode& t_node);
    virtual void ControlStep();
    virtual void Reset();

    // public helper functions
	bool inTheNest();
	bool hasFoundFood();
	bool hasFoodItem();
	bool isNowForaging();
	void goToNest();
	void goToTarget();
	void goForaging();

	// public getter and setter functions
	void setFoodItemStatus(bool newStatus);
	void setForagingStatus(bool newStatus);
	void setTargetingStatus(bool newStatus);
    void setSimulationStatus(bool newStatus);
	void setFootBotPosition(CVector2& newPosition);
	void setFootBotTarget(CVector2& newPosition);
	void setForagingTarget(CVector2& newPosition);
    void setNestPosition(CVector2& newPosition);

private:

	// robot components
	CCI_DifferentialSteeringActuator* steeringActuator;
	CCI_FootBotProximitySensor* proximitySensor;
	CCI_FootBotMotorGroundSensor* groundSensor;
	CCI_FootBotLightSensor* lightSensor;
    CRandom::CRNG* RNG;

	// collision detection and foot-bot positioning
	navigation navControls;
	size_t foragingAttempts;

	// (CPFA) central-place foraging algorithm
	Real travelProbability;
	Real searchProbability;
	Real uninformedSearchCorrelation;
	Real informedSearchDecay;
	Real siteFidelityRate;
	Real pheromoneRate;
	Real pheromoneDecay;

	// foot-bot status variables
	bool isHoldingFoodItem;
	bool isForaging;
	bool isTargetSeeking;
	bool isSimulationOver;

	// private helper functions used for motion control
	bool collisionDetection();
	CRadians lawOfCosines(CVector2& A, CVector2& B, CVector2& C);
	Real getSignOfRotationAngle(CVector2& A, CVector2& B, CVector2& C);
	CVector2 getVectorToLight();
	CVector2 getVectorToPosition(const CVector2& targetPosition);
	void setWheelSpeed(const CVector2& heading);
};

#endif /* IANT_CONTROLLER_H_ */
