#ifndef CONTROLLER_H_
#define CONTROLLER_H_

#include "PheromoneWaypoint.h"
/* Base class for controller objects. */
#include <argos3/core/control_interface/ci_controller.h>
/* Updates the motor speed settings. */
#include <argos3/plugins/robots/generic/control_interface/ci_differential_steering_actuator.h>
/* Collision detection sensors. */
#include <argos3/plugins/robots/foot-bot/control_interface/ci_footbot_proximity_sensor.h>
/* Detect color changes on the ground for food & nest detection. */
#include <argos3/plugins/robots/foot-bot/control_interface/ci_footbot_motor_ground_sensor.h>
/* Used in navigation to locate targets, light is fixed at the nest. */
#include <argos3/plugins/robots/foot-bot/control_interface/ci_footbot_light_sensor.h>
/* Class for random number generator objects. */
#include <argos3/core/utility/math/rng.h>
/* The 2D vector definition used in ARGoS. */
#include <argos3/core/utility/math/vector2.h>
/* Provides LOG and LOGERR print out capability to the ARGoS GUI screen. */
#include <argos3/core/utility/logging/argos_log.h>

/* Provide access to ARGoS 3 classes and objects. */
using namespace argos;
/* Provide access to std::endl and std::vector, etc. */
using namespace std;

/* The controller class for iAnt robots. This is the "brain" for individual robot behavior,
 * and it implements the iAnt CPFA. */
class Controller : public CCI_Controller {

private:

	PheromoneWaypoint controllerPheromone;

public:

	/* Constructor function. */
	Controller();

	/* Destructor function. */
	~Controller();

    /* Initializes the controller.
     * You should always perform all your memory allocation and configuration in this method,
     * and not in the constructor.
     * @param t_node The XML tree associated to this controller.
     * @see Reset()
     * @see Destroy() */
	void Init(TConfigurationNode& node);

	/* Executes a control step.
     * The logic of your controller goes here. */
    void ControlStep();

    /* Resets the state of the controller to what it was right after Init() was executed.
     * Note that the state of the robot, as well as the state of sensors and actuators
     * is automatically reset by ARGoS outside this class.
     * @see Init()
     * @see Destroy() */
    void Reset();

    /* You should perform memory deallocation and clean up in this function.
     * @see Init()
     * @see Reset() */
    void Destroy();

};

#endif /* CONTROLLER_H_ */
